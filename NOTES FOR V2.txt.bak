if the submit button clicked
prevent default
check the class required
check the type
if text: checkempty > firstname/lastname/username , min 3, max according to attr('min') prop('min')
if email: checkempty > validate email
if password: checkempty > min 6

add label_col and input_col additional

add classes alpha, numeric, alphaspace, alphanumericdash, alphanumeric for inputs

add functions.js to the formbuilder

            if(the_type =='checkbox' || the_type =='radio'){
                if(_this.prop('checked') ==""){
                    _this.closest('.form_builder_row').find('.response').html('Please fill in '+make_label(_this.prop("id")) ).addClass('text-danger');
                    _this.addClass('border-danger');
                    _this.first().focus();
                    _this.on('change',function(){
                    _this.closest('.form_builder_row').find('.response').hide();
                    _this.removeClass('border-danger');
                    });
                }
            }else{
                if(_this.val() === ""){
                    _this.closest('.form_builder_row').find('.response').html('Please fill in '+make_label(_this.prop("id")) ).addClass('text-danger');
                    _this.addClass('border-danger');
                    _this.first().focus();
                    _this.on('change keyup',function(){
                        _this.closest('.form_builder_row').find('.response').hide();
                        _this.removeClass('border-danger');
                    });
                }else if(the_type == 'text'){
                    if( _this.val().length < _this.attr('minlength')){
                    _this.closest('.form_builder_row').find('.response').html( make_label(_this.prop("id"))+ ' should be at least '+_this.attr('minlength')+'characters').addClass('text-danger');
                    _this.addClass('border-danger');
                    _this.first().focus();
                    _this.on('change keyup',function(){
                        _this.closest('.form_builder_row').find('.response').hide();
                        _this.removeClass('border-danger');
                    });
                    } 
                }else if(the_type == 'email'){
                    if( !isValidEmail(_this) ){
                        _this.closest('.form_builder_row').find('.response').html( 'Email is not valid! ' ).addClass('text-danger');
                        _this.addClass('border-danger');
                        _this.first().focus();
                        _this.on('change keyup',function(){
                            if(!isValidEmail(_this)){
                                _this.closest('.form_builder_row').find('.response').hide();
                                _this.removeClass('border-danger');
                            }
                        });
                    }
                }
            }

  $.each($('.form_builder_field.required'),function(){
            console.log($('.form_builder_field.required'));
            let the_message;
            if($('.form_builder_field.required').val() ==""){
                the_message = "Please fill "+the_field.name;
                response_div = $('.form_builder_field.required').closest('.form-builder-row').find('.response');
                response_div.addClass('text-danger').html(the_message);
            }else if($('.form_builder_field.required').val() <= 3){
                the_message = the_field.name+" must be at least 3 chars long!";
                response_div = $('.form_builder_field.required').closest('.form-builder-row').find('.response');
                response_div.addClass('text-danger').html(the_message);
                return false;
            } else{
                the_message = $('.form_builder_field.required').type;
                response_div = $('.form_builder_field.required').closest('.form-builder-row').find('.response');
                response_div.addClass('text-danger').html(the_message);
            }
        });